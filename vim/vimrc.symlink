" Preamble ---------------------------------------------------------------- {{{
set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Plugin 'gmarik/vundle'

Plugin 'Shougo/vimfiler.vim'
Plugin 'Shougo/unite.vim'
Plugin 'Shougo/vimproc'
Plugin 'chrisbra/Colorizer'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tpope/vim-fugitive'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'Konfekt/FastFold'
Plugin 'embear/vim-localvimrc'
Plugin 'christoomey/vim-tmux-navigator'

" IDE {{{
Plugin 'majutsushi/tagbar'
Plugin 'davidhalter/jedi-vim'
Plugin 'flowtype/vim-flow'
Plugin 'Quramy/tsuquyomi.git'
Plugin 'klen/python-mode'
Plugin 'neomake/neomake'
if has('nvim')
	Plugin 'Shougo/deoplete.nvim'
	Plugin 'carlitux/deoplete-ternjs'
	Plugin 'zchee/deoplete-jedi'

	let g:deoplete#enable_at_startup = 1

	let g:python_host_prog = $HOME .'/.pyenv/versions/neovim2/bin/python'
	let g:python3_host_prog = $HOME . '/.pyenv/versions/neovim3/bin/python'
	let g:tern_request_timeout = 1
	let g:tern_show_signature_in_pum = '0'  " This do disable full signature type on autocomplete
else
	Plugin 'Valloric/YouCompleteMe'
	Plugin 'marijnh/tern_for_vim'
endif
Plugin 'ervandew/supertab'
Plugin 'guns/vim-clojure-static'
Plugin 'tpope/vim-fireplace'
Plugin 'heavenshell/vim-jsdoc'
" }}} IDE

" searching {{{
Plugin 'mileszs/ack.vim'
Plugin 'kien/ctrlp.vim'
" }}}

" editing {{{
Plugin 'docunext/closetag.vim'
Plugin 'tpope/vim-unimpaired'
Plugin 'SirVer/ultisnips'
Plugin 'scrooloose/nerdcommenter'
Plugin 'honza/vim-snippets'
" }}} editing

" syntax {{{
Plugin 'burnettk/vim-angular'
Plugin 'chase/vim-ansible-yaml'
Plugin 'vim-scripts/jQuery'
Plugin 'tpope/vim-markdown'
Plugin 'kchmck/vim-coffee-script'
Plugin 'digitaltoad/vim-jade'
Plugin 'othree/html5.vim'
Plugin 'Glench/Vim-Jinja2-Syntax'
Plugin 'isRuslan/vim-es6'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'mxw/vim-jsx'
Plugin 'ianks/vim-tsx'
Plugin 'pangloss/vim-javascript'
Plugin 'luochen1990/rainbow'
Plugin 'leafgarland/typescript-vim'

" }}} syntax

" colorschemes {{{
Plugin 'morhetz/gruvbox'
Plugin 'nanotech/jellybeans.vim'
" }}} colorschemes

" scripts from http://vim-scripts.org/vim/scripts.html
Plugin 'bufexplorer.zip'

"Helptags

filetype plugin indent on
" }}}
" Basic options ----------------------------------------------------------- {{{
set winaltkeys=no
set ttyfast
set scrolloff=3
set laststatus=2
set incsearch
set encoding=utf-8

let mapleader = "fj"

" Make Vim able to edit crontab files again.
set backupskip=/tmp/*,/private/tmp/*"

" Resize splits when the window is resized
au VimResized * :wincmd =

" Colorscheme and looks
set guioptions-=T
set guioptions-=r
set t_Co=256

syntax on
set background=dark
colorscheme gruvbox
set guifont=PragmataPro\ 10
set number
" Use cursorline and fix ugly yellow
set cursorline
" hi CursorLineNr       guifg=#8b8bcd

set listchars=eol:¬,tab:→\ ,trail:~,extends:>,precedes:<

set mouse=a
set clipboard+=unnamedplus

" Look for a .vim.custom when a file is opened
au BufNewFile,BufRead *.c call CheckForCustomConfiguration()
function! CheckForCustomConfiguration()
    " Check for .vim.custom in the directory containing the newly opened file
    let custom_config_file = expand('%:p:h') . '/.vim.custom'
    if filereadable(custom_config_file)
        exe 'source' custom_config_file
    endif
endfunction

" Line Return {{{

" Make sure Vim returns to the same line when you reopen a file.
" Thanks, Amit
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}} Basic options

" Indent
set shiftwidth=4
set tabstop=4

" Bash like completion
set wildmode=longest,list,full
set wildmenu

" Backups {{{
set backup                        " enable backups
set noswapfile                    " It's 2012, Vim.

set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif
" }}} Backups
" }}} Basic options


" Convenience mappings ---------------------------------------------------- {{{
map <silent> <A-h> <C-w><
map <silent> <A-j> <C-w>-
map <silent> <A-k> <C-w>+
map <silent> <A-l> <C-w>>

" Switch tabs
nnoremap <leader>bn :tabnext<CR>
nnoremap <leader>bp :tabprev<CR>
nnoremap <leader>bc :tabnew
nnoremap <leader>bd :tabclose<CR>


" Fuck you, help key.
noremap  <F1> :set invfullscreen<CR>
inoremap <F1> <ESC>:set invfullscreen<CR>a

" paste toggle
nnoremap <F2> :set invpaste paste?<CR>
imap <F2> <C-O><F2>
set pastetoggle=<F2>

" Toggle line number
nmap <leader>l :setlocal number!<CR>

" redraw screen and clear hightlights
" noremap <silent> <c-l> :nohls<cr><c-l>
nnoremap <leader>nh :noh<cr>

" Select (charwise) the contents of the current line, excluding indentation.
" Great for pasting Python lines into REPLs.
nnoremap vv ^vg_

" CDC = Change to Directory of Current file
command CDC cd %:p:h

" Highlight and match ExtraWhitespaces
highlight ExtraWhitespace ctermbg=red guibg=#ce4e4e
" Show trailing whitespace except when typing on line:
nnoremap <Leader>wn :match ExtraWhitespace /\s\+\%#\@<!$/<CR>
nnoremap <Leader>wf :match<CR>

cabbrev tabv tab sview +setlocal\ nomodifiable

" Today = insert todays date
command Today :norm! a<C-R>=strftime("%Y%m%d")<CR>

" Show color under cursor
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>


" }}} Convenience mappings

" Searching and movement -------------------------------------------------- {{{
" Jump by visual line by default
"nnoremap j gj
"nnoremap k gk

" }}} Searching and movement

" Folding ----------------------------------------------------------------- {{{
set foldlevelstart=0

" Space to toggle folds.
" nnoremap <Space> za
" vnoremap <Space> za

" Make zO recursively open whatever top level fold we're in, no matter where the
" cursor happens to be.
nnoremap zO zCzO

" "Focus" the current line.  Basically:
"
" 1. Close all folds.
" 2. Open just the folds containing the current line.
" 3. Move the line to a little bit (15 lines) above the center of the screen.
" 4. Pulse the cursor line.  My eyes are bad.
"
" This mapping wipes out the z mark, which I never use.
"
" I use :sus for the rare times I want to actually background Vim.
nnoremap <c-z> mzzMzvzz15<c-e>`z:Pulse<cr>

function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()
" }}} Folding
" Filetype-specific ------------------------------------------------------- {{{
" Vim {{{
augroup ft_vim
    au!

    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END

augroup ft_tex
	au!
	au FileType tex call IMAP('`w', '\omega', 'tex')
augroup END
" }}} Vim
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2 expandtab

augroup filetypedetect
    au BufRead,BufNewFile Jenkinsfile set filetype=groovy
augroup END
autocmd FileType groovy setlocal shiftwidth=4 tabstop=4 expandtab
autocmd FileType typescript setlocal shiftwidth=4 tabstop=4 expandtab

autocmd FileType yaml setlocal shiftwidth=2 tabstop=2 expandtab

" }}} Filetype-specific

" Plugin settings --------------------------------------------------------- {{{

" YouCompleteMe {{{
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'
" }}} YouCompleteMe

" UltiSnips {{{
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"
" }}} UltiSnips
" Neomake {{{
let g:neomake_javascript_flow_exe = system('PATH=$(npm bin):$PATH && which flow | tr -d "\n"')
let g:neomake_javascript_eslint_exe = system('PATH=$(npm bin):$PATH && which eslint | tr -d "\n"')
let g:neomake_javascript_enabled_makers = ['eslint', 'flow']
" }}} Neomake

" snippets variables {{{
let g:snips_author='Magnus Helmersson'
let g:author='Magnus Helmersson'
let g:snips_email='magnus.hlmersson@gmail.com'
let g:email='magnus.hlmersson@gmail.com'
let g:snips_github='https://github.com/mhelmer'
let g:github='https://github.com/mhelmer'
" }}} snippets variables

" vim-indent-guides {{{
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
" }}} vim-indent-guides

" pdflatex {{{
let g:Tex_CompileRule_pdf = 'latexmk -pdf -f $*'
let g:Tex_ViewRule_pdf = 'evince'
" Set the target format to pdf.
let g:Tex_DefaultTargetFormat = 'pdf'

let g:tex_flavor = "latex"
let g:Tex_ImageDir = '.'
" }}} pdflatex

" vim-airline {{{
let g:airline_powerline_fonts = 1
let g:airline_theme = 'base16'
" let g:airline_symbols.space = "\ua0"
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#left_sep = ' '
" let g:airline#extensions#tabline#left_alt_sep = '|'
" }}}

" Powerline {{{
" set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim
" let g:Powerline_symbols="fancy"
" }}} Powerline

if has('nvim')
	"  {{{ Neomake
	autocmd! BufWritePost * Neomake
	" }}} Neomake
else
	" Syntastic {{{
	let g:syntastic_tex_chktex_showmsgs = 0
	let g:syntastic_ignore_files = ['\.py$', '\.rst$']
	set statusline+=%#warningmsg#
	set statusline+=%{SyntasticStatuslineFlag()}
	set statusline+=%*

	let g:syntastic_always_populate_loc_list = 1
	let g:syntastic_auto_loc_list = 1
	let g:syntastic_check_on_open = 1
	let g:syntastic_check_on_wq = 0
	" }}} Syntastic
endif

" VimFiler {{{
nmap <Leader>e ::VimFiler -buffer-name=explorer
\ -split -simple -winwidth=35 -toggle -no-quit<CR>
" let g:vimfiler_ignore_pattern = ['^\.git$', '^\.DS_Store$', '^\.', '.*\.(pyc|o|out|a|~)$']

autocmd FileType vimfiler nmap <silent><buffer><expr> <CR> vimfiler#smart_cursor_map(
\ "\<Plug>(vimfiler_expand_tree)",
\ "\<Plug>(vimfiler_edit_file)")
autocmd FileType vimfiler nmap <silent><buffer><expr> <2-LeftMouse> vimfiler#smart_cursor_map(
\ "\<Plug>(vimfiler_expand_tree)",
\ "\<Plug>(vimfiler_edit_file)")

let g:vimfiler_ignore_pattern = '\.git\|\.DS_Store\|\.pyc'
let g:vimfiler_as_default_explorer = 1

let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'


" }}} VimFiler

" NERDTree {{{
" nmap \e :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$']
let NERDTreeIgnore+=['.*\.o$']
let NERDTreeIgnore+=['.*\~$']
let NERDTreeIgnore+=['.*\.out$']
let NERDTreeIgnore+=['.*\.so$', '.*\.a$']
" }}} NERDTree

" tagbar {{{
nmap <Leader>t :TagbarToggle<CR>
" }}} tagbar

" python-mode {{{
let g:pymode_rope = 0
" hopefully solved by installing fastfold
" let g:pymode_folding = 0
" }}} python-mode

" rainbow {{
" let g:rainbow_active = 1
" }} rainbow
" ack.vim {{{
" open Ack
nnoremap <leader>a :Ack
" run Ack against word under cursor
nnoremap <leader>A :Ack <c-r><c-w><CR>
" }}}} ack.vim

" {{{ rainbow
" let g:rainbow_active = 1
" }}} rainbow

" {{{ vim-jsx
let g:jsx_ext_required = 0
" }}} vim-jsx

" {{{ vim-jsdoc
let g:jsdoc_enable_es6 = 1
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
" }}} vim-jsdoc

" {{{ vim-javascript
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1
" }}} vim-javascript

" {{{ Colorizer
let g:colorizer_auto_filetype = 'css,scss,sass,less,js,html'
" }}} Colorizer

" }}} Plugin settings
" Mini-plugins ------------------------------------------------------------ {{{
" Vimtips {{{
function! Vimtips() " {{{
  split ~/Projects/vim-bindings
  resize 9
  set readonly
endfunction " }}}
" Vimtips }}}
	
" Pulse Line {{{

function! s:Pulse() " {{{
    let current_window = winnr()
    windo set nocursorline
    execute current_window . 'wincmd w'
    setlocal cursorline

    redir => old_hi
        silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    let steps = 9
    let width = 1
    let start = width
    let end = steps * width
    let color = 233

    for i in range(start, end, width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor
    for i in range(end, start, -1 * width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor

    execute 'hi ' . old_hi
endfunction " }}}
command! -nargs=0 Pulse call s:Pulse()

" }}} Pulse Line
" Toggle diff highlight {{{
"
" Disable one diff window during a three-way diff allowing you to cut out the
" noise of a three-way diff and focus on just the changes between two versions
" at a time. Inspired by Steve Losh's Splice
function! DiffToggle(window)
  " Save the cursor position and turn on diff for all windows
  let l:save_cursor = getpos('.')
  windo :diffthis
  " Turn off diff for the specified window (but keep scrollbind) and move
  " the cursor to the left-most diff window
  exe a:window . "wincmd w"
  diffoff
  set scrollbind
  set cursorbind
  exe a:window . "wincmd " . (a:window == 1 ? "l" : "h")
  " Update the diff and restore the cursor position
  diffupdate
  call setpos('.', l:save_cursor)
endfunction
" Toggle diff view on the left, center, or right windows
nmap <silent> <leader>dl :call DiffToggle(1)<cr>
nmap <silent> <leader>dc :call DiffToggle(2)<cr>
nmap <silent> <leader>dr :call DiffToggle(3)<cr>
" }}} Toggöe diff highlight
" }}} Mini-plugins
"  TODO ------------------------------------------------------------------- {{{
"
"  highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"  match OverLength /\%81v.\+/
"
"  -------------------------------------------------------------------------}}}
"
"

