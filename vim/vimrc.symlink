" Preamble ---------------------------------------------------------------- {{{
set nocompatible
call pathogen#infect()
filetype plugin indent on
" }}}
" Basic options ----------------------------------------------------------- {{{
set winaltkeys=no
set ttyfast
set scrolloff=3
set laststatus=2
set incsearch
set encoding=utf-8

" Make Vim able to edit crontab files again.
set backupskip=/tmp/*,/private/tmp/*"

" Resize splits when the window is resized
au VimResized * :wincmd =

" Colorscheme and looks
set guioptions-=T
set guioptions-=r
set t_Co=256
syntax on
set background=dark
colorscheme inkpot
" less extreme fold color
hi Folded         gui=NONE   guifg=#cfcfcd   guibg=#453957
" switch colors in TODO, so it appears on cursorline
hi Todo           gui=BOLD   guifg=#d0a060   guibg=#303030
set guifont=PragmataPro\ 10
let g:Powerline_symbols="fancy"
set number
" Use cursorline and fix ugly yellow
set cursorline
hi CursorLineNr       guifg=#8b8bcd

" Line Return {{{

" Make sure Vim returns to the same line when you reopen a file.
" Thanks, Amit
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}} Basic options

" Indent
set shiftwidth=4
set tabstop=4

" Backups {{{
set backup                        " enable backups
set noswapfile                    " It's 2012, Vim.

set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif
" }}}

" }}} Backups

" Convenience mappings ---------------------------------------------------- {{{
" paste toggle

" Fuck you, help key.
noremap  <F1> :set invfullscreen<CR>
inoremap <F1> <ESC>:set invfullscreen<CR>a

nnoremap <F2> :set invpaste paste?<CR>
imap <F2> <C-O><F2>
set pastetoggle=<F2>

" Toggle line number
:nmap \l :setlocal number!<CR>

" redraw screen and clear hightlights
:noremap <silent> <c-l> :nohls<cr><c-l>

" Select (charwise) the contents of the current line, excluding indentation.
" Great for pasting Python lines into REPLs.
nnoremap vv ^vg_

" CDC = Change to Directory of Current file
command CDC cd %:p:h

" Highlight and match ExtraWhitespaces
highlight ExtraWhitespace ctermbg=red guibg=#ce4e4e
" Show trailing whitespace except when typing on line:
nnoremap <Leader>wn :match ExtraWhitespace /\s\+\%#\@<!$/<CR>
nnoremap <Leader>wf :match<CR>

" }}} Convenience mappings

" Searching and movement -------------------------------------------------- {{{
" Jump by visual line by default
"nnoremap j gj
"nnoremap k gk

" }}} Searching and movement

" Folding ----------------------------------------------------------------- {{{
set foldlevelstart=0

" Space to toggle folds.
" nnoremap <Space> za
" vnoremap <Space> za

" Make zO recursively open whatever top level fold we're in, no matter where the
" cursor happens to be.
nnoremap zO zCzO

" "Focus" the current line.  Basically:
"
" 1. Close all folds.
" 2. Open just the folds containing the current line.
" 3. Move the line to a little bit (15 lines) above the center of the screen.
" 4. Pulse the cursor line.  My eyes are bad.
"
" This mapping wipes out the z mark, which I never use.
"
" I use :sus for the rare times I want to actually background Vim.
nnoremap <c-z> mzzMzvzz15<c-e>`z:Pulse<cr>

function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()
" }}} Folding
" Filetype-specific ------------------------------------------------------- {{{
" Vim {{{
augroup ft_vim
    au!

    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END

augroup ft_tex
	au!
	au FileType tex call IMAP('`w', '\omega', 'tex')
augroup END
" }}} Vim
" }}} Filetype-specific

" Plugin settings --------------------------------------------------------- {{{
" UltiSnips {{{
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" }}} UltiSnips

" pdflatex {{{
let g:Tex_CompileRule_pdf = 'latexmk -pdf -f $*'
let g:Tex_ViewRule_pdf = 'evince'
" Set the target format to pdf.
let g:Tex_DefaultTargetFormat = 'pdf'

let g:tex_flavor = "latex"
let g:Tex_ImageDir = '.'
" }}} pdflatex

" Powerline {{{
set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim
" }}} Powerline

" NERDTree {{{
nmap \e :NERDTreeToggle<CR>
" }}} NERDTree
" tagbar {{{
nmap <Leader>t :TagbarToggle<CR>
" }}} tagbar
" }}} Plugin settings
" Mini-plugins ------------------------------------------------------------ {{{
" Pulse Line {{{

function! s:Pulse() " {{{
    let current_window = winnr()
    windo set nocursorline
    execute current_window . 'wincmd w'
    setlocal cursorline

    redir => old_hi
        silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    let steps = 9
    let width = 1
    let start = width
    let end = steps * width
    let color = 233

    for i in range(start, end, width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor
    for i in range(end, start, -1 * width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor

    execute 'hi ' . old_hi
endfunction " }}}
command! -nargs=0 Pulse call s:Pulse()

" }}} Pulse Line
" }}} Mini-plugins
"  TODO ------------------------------------------------------------------- {{{
"
"  highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"  match OverLength /\%81v.\+/
"
"  -------------------------------------------------------------------------}}}
